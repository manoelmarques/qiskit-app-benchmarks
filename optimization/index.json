{"project": "qiskit-optimization", "project_url": "https://qiskit.org/documentation/optimization/", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"424": "f9b1e13bc3bb32eb0ae24a81a2aad5dd83b83206", "461": "54a6d0750492132aa019975e3a8648c507b7553c"}, "revision_to_date": {"424": 1617272902000, "461": 1618503021000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i7-8700B CPU @ 3.20GHz"], "machine": ["MacOSWork.local"], "num_cpu": ["2"], "os": ["Darwin 20.5.0"], "ram": ["12884901888"], "python": ["3.8"], "networkx": ["2.5.1"], "qiskit-aer": ["0.8.2"], "qiskit-terra": ["0.17.3"], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-8700B CPU @ 3.20GHz", "machine": "MacOSWork.local", "num_cpu": "2", "os": "Darwin 20.5.0", "ram": "12884901888", "python": "3.8", "networkx": "2.5.1", "qiskit-aer": "0.8.2", "qiskit-terra": "0.17.3", "branch": "master"}], "benchmarks": {"maxcut.MaxcutBenchmarks.time_generate_qubo": {"code": "class MaxcutBenchmarks:\n    def time_generate_qubo(self, _, __):\n        \"\"\"generate time qubo\"\"\"\n        self._generate_qubo(self._maxcut)\n\n    def setup(self, n, d):\n        \"\"\"setup\"\"\"\n        seed = 123\n        algorithm_globals.random_seed = seed\n        qasm_sim = Aer.get_backend(\"qasm_simulator\")\n        self._qins = QuantumInstance(\n            backend=qasm_sim, shots=1, seed_simulator=seed, seed_transpiler=seed\n        )\n        if n >= d:\n            graph = nx.random_regular_graph(n=n, d=d)\n            self._maxcut = Maxcut(graph=graph)\n            self._qp = self._maxcut.to_quadratic_program()\n        else:\n            raise NotImplementedError", "min_run_count": 2, "name": "maxcut.MaxcutBenchmarks.time_generate_qubo", "number": 0, "param_names": ["number of nodes", "degree"], "params": [["2", "4", "8", "12"], ["3", "5", "7", "9"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6a83e8cbb2618e7adefe963a1a9a3bfad908878233a16f34936ec0c2ecca916e", "warmup_time": -1}, "maxcut.MaxcutBenchmarks.time_grover": {"code": "class MaxcutBenchmarks:\n    def time_grover(self, _, __):\n        \"\"\"time grover\"\"\"\n        meo = GroverOptimizer(\n            num_value_qubits=self._qp.get_num_vars() // 2,\n            num_iterations=1,\n            quantum_instance=self._qins,\n        )\n        meo.solve(self._qp)\n\n    def setup(self, n, d):\n        \"\"\"setup\"\"\"\n        seed = 123\n        algorithm_globals.random_seed = seed\n        qasm_sim = Aer.get_backend(\"qasm_simulator\")\n        self._qins = QuantumInstance(\n            backend=qasm_sim, shots=1, seed_simulator=seed, seed_transpiler=seed\n        )\n        if n >= d:\n            graph = nx.random_regular_graph(n=n, d=d)\n            self._maxcut = Maxcut(graph=graph)\n            self._qp = self._maxcut.to_quadratic_program()\n        else:\n            raise NotImplementedError", "min_run_count": 2, "name": "maxcut.MaxcutBenchmarks.time_grover", "number": 0, "param_names": ["number of nodes", "degree"], "params": [["2", "4", "8", "12"], ["3", "5", "7", "9"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8a2c23f7ab24fafc4b6c0db01379d8d3b2972090ef90d954d8f24729fe1cd5c1", "warmup_time": -1}, "maxcut.MaxcutBenchmarks.time_qaoa": {"code": "class MaxcutBenchmarks:\n    def time_qaoa(self, _, __):\n        \"\"\"time qaoa\"\"\"\n        meo = MinimumEigenOptimizer(\n            min_eigen_solver=QAOA(optimizer=COBYLA(maxiter=1), quantum_instance=self._qins)\n        )\n        meo.solve(self._qp)\n\n    def setup(self, n, d):\n        \"\"\"setup\"\"\"\n        seed = 123\n        algorithm_globals.random_seed = seed\n        qasm_sim = Aer.get_backend(\"qasm_simulator\")\n        self._qins = QuantumInstance(\n            backend=qasm_sim, shots=1, seed_simulator=seed, seed_transpiler=seed\n        )\n        if n >= d:\n            graph = nx.random_regular_graph(n=n, d=d)\n            self._maxcut = Maxcut(graph=graph)\n            self._qp = self._maxcut.to_quadratic_program()\n        else:\n            raise NotImplementedError", "min_run_count": 2, "name": "maxcut.MaxcutBenchmarks.time_qaoa", "number": 0, "param_names": ["number of nodes", "degree"], "params": [["2", "4", "8", "12"], ["3", "5", "7", "9"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a89405f341d366a4276e5f1d7515a2f9623454665aacbcd82baedfe08bbf27a8", "warmup_time": -1}, "maxcut.MaxcutBenchmarks.time_vqe": {"code": "class MaxcutBenchmarks:\n    def time_vqe(self, _, __):\n        \"\"\"time vqe\"\"\"\n        meo = MinimumEigenOptimizer(\n            min_eigen_solver=VQE(\n                optimizer=COBYLA(maxiter=1), ansatz=EfficientSU2(), quantum_instance=self._qins\n            )\n        )\n        meo.solve(self._qp)\n\n    def setup(self, n, d):\n        \"\"\"setup\"\"\"\n        seed = 123\n        algorithm_globals.random_seed = seed\n        qasm_sim = Aer.get_backend(\"qasm_simulator\")\n        self._qins = QuantumInstance(\n            backend=qasm_sim, shots=1, seed_simulator=seed, seed_transpiler=seed\n        )\n        if n >= d:\n            graph = nx.random_regular_graph(n=n, d=d)\n            self._maxcut = Maxcut(graph=graph)\n            self._qp = self._maxcut.to_quadratic_program()\n        else:\n            raise NotImplementedError", "min_run_count": 2, "name": "maxcut.MaxcutBenchmarks.time_vqe", "number": 0, "param_names": ["number of nodes", "degree"], "params": [["2", "4", "8", "12"], ["3", "5", "7", "9"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b926e345f0b3b185ee7eb79a0230d4aad53c36c27b1e616c242704f7ace7ba54", "warmup_time": -1}}, "machines": {"MacOSWork.local": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-8700B CPU @ 3.20GHz", "machine": "MacOSWork.local", "num_cpu": "2", "os": "Darwin 20.5.0", "ram": "12884901888", "version": 1}}, "tags": {"0.1.0": 424}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}