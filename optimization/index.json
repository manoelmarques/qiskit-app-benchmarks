{"project": "qiskit-optimization", "project_url": "https://qiskit.org/documentation/optimization/", "show_commit_url": "http://github.com/Qiskit/qiskit-optimization/commit/", "hash_length": 8, "revision_to_hash": {"424": "f9b1e13bc3bb32eb0ae24a81a2aad5dd83b83206", "1093": "0b1a9a5a76933521be11934870f725a619d8671b", "1191": "8553c6fc5e0c079e928fbed7861e1916aa02fdb2", "1243": "6aa5cc476682827689cf2cf301d10b13f1c5bfe7", "1319": "c55e2a20b6d94ed917732588bec28f42d7e973a1", "1508": "73fa9a739a57a25a81592d925f9176431d415929", "1620": "7b336270517ea02139809cea5aa361d8d3741648", "1664": "2fc65b3a04e9e3693085d0405b966ed71c06b1d6"}, "revision_to_date": {"424": 1617272902000, "1093": 1626121949000, "1191": 1627589910000, "1243": 1629302079000, "1319": 1632328310000, "1508": 1639661740000, "1620": 1644847875000, "1664": 1646427708000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i7-3720QM CPU @ 2.60GHz"], "machine": ["buildkitsandbox"], "num_cpu": ["4"], "os": ["Linux 5.10.76-linuxkit"], "ram": ["9171296"], "python": ["3.8"], "cplex": [""], "cvxpy": [""], "matplotlib": [""], "gurobipy": [""], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-3720QM CPU @ 2.60GHz", "machine": "buildkitsandbox", "num_cpu": "4", "os": "Linux 5.10.76-linuxkit", "ram": "9171296", "python": "3.8", "cplex": "", "cvxpy": "", "matplotlib": "", "gurobipy": "", "branch": "main"}], "benchmarks": {"knapsack.KnapsackBenchmarks.time_generate_qubo": {"code": "class KnapsackBenchmarks:\n    def time_generate_qubo(self, _, __):\n        \"\"\"generate time qubo\"\"\"\n        self._generate_qubo(self._knapsack)\n\n    def setup(self, num_items, max_weights):\n        \"\"\"setup\"\"\"\n        seed = 10\n        algorithm_globals.random_seed = seed\n        qasm_sim = Aer.get_backend(\"aer_simulator\")\n        self._qins = QuantumInstance(\n            backend=qasm_sim, shots=1, seed_simulator=seed, seed_transpiler=seed\n        )\n        random.seed(seed)\n        values = [random.randint(1, max_weights) for _ in range(num_items)]\n        weights = [random.randint(1, max_weights) for _ in range(num_items)]\n        self._knapsack = Knapsack(values, weights, max_weights)\n        self._qp = self._knapsack.to_quadratic_program()", "min_run_count": 2, "name": "knapsack.KnapsackBenchmarks.time_generate_qubo", "number": 0, "param_names": ["number of items", "max_weights"], "params": [["2", "3", "4", "5"], ["2", "4", "8", "16"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "knapsack.KnapsackBenchmarks.time_grover": {"code": "class KnapsackBenchmarks:\n    def time_grover(self, _, __):\n        \"\"\"time grover\"\"\"\n        meo = GroverOptimizer(\n            num_value_qubits=self._qp.get_num_vars(),\n            num_iterations=1,\n            quantum_instance=self._qins,\n        )\n        meo.solve(self._qp)\n\n    def setup(self, num_items, max_weights):\n        \"\"\"setup\"\"\"\n        seed = 10\n        algorithm_globals.random_seed = seed\n        qasm_sim = Aer.get_backend(\"aer_simulator\")\n        self._qins = QuantumInstance(\n            backend=qasm_sim, shots=1, seed_simulator=seed, seed_transpiler=seed\n        )\n        random.seed(seed)\n        values = [random.randint(1, max_weights) for _ in range(num_items)]\n        weights = [random.randint(1, max_weights) for _ in range(num_items)]\n        self._knapsack = Knapsack(values, weights, max_weights)\n        self._qp = self._knapsack.to_quadratic_program()", "min_run_count": 2, "name": "knapsack.KnapsackBenchmarks.time_grover", "number": 0, "param_names": ["number of items", "max_weights"], "params": [["2", "3", "4", "5"], ["2", "4", "8", "16"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "knapsack.KnapsackBenchmarks.time_qaoa": {"code": "class KnapsackBenchmarks:\n    def time_qaoa(self, _, __):\n        \"\"\"time qaoa\"\"\"\n        meo = MinimumEigenOptimizer(\n            min_eigen_solver=QAOA(optimizer=COBYLA(maxiter=1), quantum_instance=self._qins)\n        )\n        meo.solve(self._qp)\n\n    def setup(self, num_items, max_weights):\n        \"\"\"setup\"\"\"\n        seed = 10\n        algorithm_globals.random_seed = seed\n        qasm_sim = Aer.get_backend(\"aer_simulator\")\n        self._qins = QuantumInstance(\n            backend=qasm_sim, shots=1, seed_simulator=seed, seed_transpiler=seed\n        )\n        random.seed(seed)\n        values = [random.randint(1, max_weights) for _ in range(num_items)]\n        weights = [random.randint(1, max_weights) for _ in range(num_items)]\n        self._knapsack = Knapsack(values, weights, max_weights)\n        self._qp = self._knapsack.to_quadratic_program()", "min_run_count": 2, "name": "knapsack.KnapsackBenchmarks.time_qaoa", "number": 0, "param_names": ["number of items", "max_weights"], "params": [["2", "3", "4", "5"], ["2", "4", "8", "16"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "knapsack.KnapsackBenchmarks.time_vqe": {"code": "class KnapsackBenchmarks:\n    def time_vqe(self, _, __):\n        \"\"\"time vqe\"\"\"\n        meo = MinimumEigenOptimizer(\n            min_eigen_solver=VQE(\n                optimizer=COBYLA(maxiter=1), ansatz=EfficientSU2(), quantum_instance=self._qins\n            )\n        )\n        meo.solve(self._qp)\n\n    def setup(self, num_items, max_weights):\n        \"\"\"setup\"\"\"\n        seed = 10\n        algorithm_globals.random_seed = seed\n        qasm_sim = Aer.get_backend(\"aer_simulator\")\n        self._qins = QuantumInstance(\n            backend=qasm_sim, shots=1, seed_simulator=seed, seed_transpiler=seed\n        )\n        random.seed(seed)\n        values = [random.randint(1, max_weights) for _ in range(num_items)]\n        weights = [random.randint(1, max_weights) for _ in range(num_items)]\n        self._knapsack = Knapsack(values, weights, max_weights)\n        self._qp = self._knapsack.to_quadratic_program()", "min_run_count": 2, "name": "knapsack.KnapsackBenchmarks.time_vqe", "number": 0, "param_names": ["number of items", "max_weights"], "params": [["2", "3", "4", "5"], ["2", "4", "8", "16"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "maxcut.MaxcutBenchmarks.time_generate_qubo": {"code": "class MaxcutBenchmarks:\n    def time_generate_qubo(self, _, __):\n        \"\"\"generate time qubo\"\"\"\n        self._generate_qubo(self._maxcut)\n\n    def setup(self, n, d):\n        \"\"\"setup\"\"\"\n        seed = 123\n        algorithm_globals.random_seed = seed\n        qasm_sim = Aer.get_backend(\"qasm_simulator\")\n        self._qins = QuantumInstance(\n            backend=qasm_sim, shots=1, seed_simulator=seed, seed_transpiler=seed\n        )\n        if n >= d:\n            graph = nx.random_regular_graph(n=n, d=d)\n            self._maxcut = Maxcut(graph=graph)\n            self._qp = self._maxcut.to_quadratic_program()\n        else:\n            raise NotImplementedError", "min_run_count": 2, "name": "maxcut.MaxcutBenchmarks.time_generate_qubo", "number": 0, "param_names": ["number of nodes", "degree"], "params": [["2", "4", "8", "12"], ["3", "5", "7", "9"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "maxcut.MaxcutBenchmarks.time_grover": {"code": "class MaxcutBenchmarks:\n    def time_grover(self, _, __):\n        \"\"\"time grover\"\"\"\n        meo = GroverOptimizer(\n            num_value_qubits=self._qp.get_num_vars() // 2,\n            num_iterations=1,\n            quantum_instance=self._qins,\n        )\n        meo.solve(self._qp)\n\n    def setup(self, n, d):\n        \"\"\"setup\"\"\"\n        seed = 123\n        algorithm_globals.random_seed = seed\n        qasm_sim = Aer.get_backend(\"qasm_simulator\")\n        self._qins = QuantumInstance(\n            backend=qasm_sim, shots=1, seed_simulator=seed, seed_transpiler=seed\n        )\n        if n >= d:\n            graph = nx.random_regular_graph(n=n, d=d)\n            self._maxcut = Maxcut(graph=graph)\n            self._qp = self._maxcut.to_quadratic_program()\n        else:\n            raise NotImplementedError", "min_run_count": 2, "name": "maxcut.MaxcutBenchmarks.time_grover", "number": 0, "param_names": ["number of nodes", "degree"], "params": [["2", "4", "8", "12"], ["3", "5", "7", "9"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "maxcut.MaxcutBenchmarks.time_qaoa": {"code": "class MaxcutBenchmarks:\n    def time_qaoa(self, _, __):\n        \"\"\"time qaoa\"\"\"\n        meo = MinimumEigenOptimizer(\n            min_eigen_solver=QAOA(optimizer=COBYLA(maxiter=1), quantum_instance=self._qins)\n        )\n        meo.solve(self._qp)\n\n    def setup(self, n, d):\n        \"\"\"setup\"\"\"\n        seed = 123\n        algorithm_globals.random_seed = seed\n        qasm_sim = Aer.get_backend(\"qasm_simulator\")\n        self._qins = QuantumInstance(\n            backend=qasm_sim, shots=1, seed_simulator=seed, seed_transpiler=seed\n        )\n        if n >= d:\n            graph = nx.random_regular_graph(n=n, d=d)\n            self._maxcut = Maxcut(graph=graph)\n            self._qp = self._maxcut.to_quadratic_program()\n        else:\n            raise NotImplementedError", "min_run_count": 2, "name": "maxcut.MaxcutBenchmarks.time_qaoa", "number": 0, "param_names": ["number of nodes", "degree"], "params": [["2", "4", "8", "12"], ["3", "5", "7", "9"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "maxcut.MaxcutBenchmarks.time_vqe": {"code": "class MaxcutBenchmarks:\n    def time_vqe(self, _, __):\n        \"\"\"time vqe\"\"\"\n        meo = MinimumEigenOptimizer(\n            min_eigen_solver=VQE(\n                optimizer=COBYLA(maxiter=1), ansatz=EfficientSU2(), quantum_instance=self._qins\n            )\n        )\n        meo.solve(self._qp)\n\n    def setup(self, n, d):\n        \"\"\"setup\"\"\"\n        seed = 123\n        algorithm_globals.random_seed = seed\n        qasm_sim = Aer.get_backend(\"qasm_simulator\")\n        self._qins = QuantumInstance(\n            backend=qasm_sim, shots=1, seed_simulator=seed, seed_transpiler=seed\n        )\n        if n >= d:\n            graph = nx.random_regular_graph(n=n, d=d)\n            self._maxcut = Maxcut(graph=graph)\n            self._qp = self._maxcut.to_quadratic_program()\n        else:\n            raise NotImplementedError", "min_run_count": 2, "name": "maxcut.MaxcutBenchmarks.time_vqe", "number": 0, "param_names": ["number of nodes", "degree"], "params": [["2", "4", "8", "12"], ["3", "5", "7", "9"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}}, "machines": {"buildkitsandbox": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-3720QM CPU @ 2.60GHz", "machine": "buildkitsandbox", "num_cpu": "4", "os": "Linux 5.10.76-linuxkit", "ram": "9171296", "version": 1}}, "tags": {"0.1.0": 424, "0.2.0": 1093, "0.2.1": 1191, "0.2.2": 1243, "0.2.3": 1319, "0.3.0": 1508, "0.3.1": 1620}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}